/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.codegen.integration.api;

import com.example.codegen.integration.model.TestGet400Response;
import com.example.codegen.integration.model.TestGet404Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-21T16:11:34.363036321-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "Test tag", description = "the Test tag API")
public interface TestTagApi {

    /**
     * GET /v1/test/{number} : this is summary
     * simple get
     *
     * @param number number test tag (required)
     * @return Success (status code 200)
     *         or The required parameter is missing or invalid (status code 400)
     *         or Route not found (status code 404)
     */
    @Operation(
        operationId = "testGet",
        summary = "this is summary",
        description = "simple get",
        tags = { "Test tag" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))
            }),
            @ApiResponse(responseCode = "400", description = "The required parameter is missing or invalid", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TestGet400Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Route not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TestGet404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/test/{number}",
        produces = { "application/json" }
    )
    ResponseEntity<Integer> _testGet(
        @Parameter(name = "number", description = "number test tag", required = true, in = ParameterIn.PATH) @PathVariable("number") Integer number
    );

}
